;; Setting and printing variables
(setq a 10)
(setq mytext "Hello")
(print mytext "Hi")
(printf "also : %f \n" a)
(pause "-")


;; for loops 
(for (i 3 6)
     (print i))
(pause "-")


;; while 
(setq i 0)
(while (< i 5)
  (print i)
  (setq i (+ 1 i)))
(pause "-")


;; if
(setq i 3)
(if (and (= i 3) (> 2 1))
    (progn
      (print "i is 3")
      (setq i (* i 2))
      )
  (print "i is not 3"))   ;; else
(pause "-")


;; vectors, matrices, tensors
(setq m1 (matrix 5))
(setq m2 (matrix 5 4))
(setq m3 (matrix 5 4 3))
(print m1)
(pause "-")
(print m2)
(pause "-")
(print m3)
(pause "-")

^P m3
(pause "-")

(setq mv [[3 4][5 6][7 8]])
(print mv)
(pause "-")

;; filling and getting elements
(m1 1 7)
(print (m1 1))
(print m1)
(pause "-")

(m2 1 2 7)
(print (m2 1 2))
(print m2)
(pause "-")

;; selecting parts of tensors
(for (j 0 (- (idx-dim m2 0) 1))
     (for (i 0 (- (idx-dim m2 1) 1))
	  (m2 j i (* i j j))))
(print m2)
(pause "-")

(print (select m2 0 3))
(print (select m2 1 3))
(pause "-")

(print (narrow m2 0 3 1))
(print (narrow m2 1 2 0))
(pause "-")	

;; looping over tensors
(idx-bloop ((ma m2))
  (print "row" ma))
(pause "-")

(idx-eloop ((ma m2))
  (print "column" ma))
(pause "-")

;; operations on tensors
(setq m2b (matrix 5 4))
(for (j 0 4)
     (for (i 0 3)
	  (m2b j i (+ i (* 2 j)))))
(print m2b)
(pause "-")


(print (idx-sqrt m2b))
(pause "-")

(print (idx-add m2 m2b))
(print (idx-mul m2 m2b))
(pause "-")

(print (idx-dotm0 m2 ((matrix) 0.5)))
(pause "-")

(idx-dotm0 m2 ((matrix) 0.5) m2b)
(print m2b)
(pause "-")

;; functions
(de sqr (x)
  (* x x)
  )

(print (sqr 10))
(pause "-")

(de fib (n)
  ((-int-) n)      ;; declaration
  (let* ((ap 1)    ;; local variables
	 (ac 1)
	 (ac-old 0))
    (printf "%f %f " ap ac)
    (for (i 3 n)
	 (setq ac-old ac)
	 (setq ac (+ ap ac))
	 (setq ap ac-old)
	 (printf "%f " ac)))
  (printf "\n")
  ())

(fib 15)
(pause "-")
    
;; classes
(defclass fib-class object
  ((-int-) n)
  ((-idx1- (-int-)) a))        ;; integer 1d array

(defmethod fib-class set-vars (n1)
  ((-int-) n1)
  (setq n n1)
  (setq a (int-matrix n))
  ())

(defmethod fib-class calculate-a ()
  (let* ((ap 1)    ;; local variables
	 (ac 1)
	 (ac-old 0))
    (a 0 1)
    (a 1 1)
    (for (i 2 (- n 1))
	 (setq ac-old ac)
	 (setq ac (+ ap ac))
	 (setq ap ac-old)
	 (a i ap)))
  ())

(pause "-")

(setq myfc (new fib-class))
(==> myfc set-vars 12)
(==> myfc calculate-a)
(print :myfc:a)
(pause "-")

;; window
;; (new-window)
(setq window1 (x11-window 1 700 800 400 "Image"))
(setq window window1)
(pause "-")

;; image function example
(libload "libimage/image-io.lsh")
(setq image (image-read-rgb "house.jpg"))
(rgb-draw-matrix 0 0 image 1 1)
(print (idx-dim image))
(pause "-")

(de switch-colors (image)
  ((-idx3- (-ubyte-)) image)
  (let* ((image2 (ubyte-matrix (idx-dim image 0) 
			       (idx-dim image 1)
			       (idx-dim image 2))))
    (copy-matrix (select image 2 1) (select image2 2 0))
    (copy-matrix (select image 2 0) (select image2 2 1))
    (copy-matrix (select image 2 2) (select image2 2 2))
    image2))

(setq image-flip (switch-colors image))
(rgb-draw-matrix (idx-dim image 1) 0 image-flip 1 1)
(pause "-")


;; compilation - runs much faster
(dhc-make ()
	  switch-colors
	  (fib-class calculate-a)
	  )

(pause "-")

(printf "Homework 1: \n")
(printf "Write a compiled function that does the following")
(printf "Pick a color in RGB (3 component vector) \n") 
(printf "and threshold (real number)\n")
(printf "From a given image \n")
(printf "produce and image with pixels colors such that \n")
(printf "if color of pixel is close enough to the selected color \n")
(printf "make the pixel white otherwise black \n \n")

(printf "Homework 2: \n")
(printf "Write a compiled function that")
(printf "Changes image into yuv components (check Wikipedia) \n")
